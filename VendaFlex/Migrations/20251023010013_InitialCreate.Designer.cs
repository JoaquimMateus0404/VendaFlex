// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VendaFlex.Data;

#nullable disable

namespace VendaFlex.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251023010013_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VendaFlex.Data.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditLogId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityName", "EntityId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Code = "GEN",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Categoria padrão",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Geral"
                        },
                        new
                        {
                            CategoryId = 2,
                            Code = "BEV",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Bebidas e refrigerantes",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bebidas"
                        },
                        new
                        {
                            CategoryId = 3,
                            Code = "FOOD",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Alimentos e perecíveis",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Alimentos"
                        },
                        new
                        {
                            CategoryId = 4,
                            Code = "HYG",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Higiene pessoal",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Higiene"
                        },
                        new
                        {
                            CategoryId = 5,
                            Code = "CLEAN",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Produtos de limpeza",
                            DisplayOrder = 4,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Limpeza"
                        },
                        new
                        {
                            CategoryId = 6,
                            Code = "ELEC",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Produtos eletrônicos",
                            DisplayOrder = 5,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Eletrônicos"
                        },
                        new
                        {
                            CategoryId = 7,
                            Code = "STAT",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Papelaria e escritório",
                            DisplayOrder = 6,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Papelaria"
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.CompanyConfig", b =>
                {
                    b.Property<int>("CompanyConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyConfigId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("AllowAnonymousInvoice")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessHours")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("DefaultTaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IncludeCustomerData")
                        .HasColumnType("bit");

                    b.Property<string>("IndustryType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InvoiceFooterText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("InvoiceFormat")
                        .HasColumnType("int");

                    b.Property<string>("InvoicePrefix")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NextInvoiceNumber")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxRegime")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompanyConfigId");

                    b.ToTable("CompanyConfigs");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.ExpenseType", b =>
                {
                    b.Property<int>("ExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ExpenseTypeId");

                    b.ToTable("ExpenseTypes");

                    b.HasData(
                        new
                        {
                            ExpenseTypeId = 1,
                            Description = "Despesas com aluguel",
                            IsActive = true,
                            Name = "Aluguel"
                        },
                        new
                        {
                            ExpenseTypeId = 2,
                            Description = "Pagamento de salários",
                            IsActive = true,
                            Name = "Salários"
                        },
                        new
                        {
                            ExpenseTypeId = 3,
                            Description = "Água, luz, internet",
                            IsActive = true,
                            Name = "Utilities"
                        },
                        new
                        {
                            ExpenseTypeId = 4,
                            Description = "Despesas com marketing",
                            IsActive = true,
                            Name = "Marketing"
                        },
                        new
                        {
                            ExpenseTypeId = 5,
                            Description = "Manutenção e reparos",
                            IsActive = true,
                            Name = "Manutenção"
                        },
                        new
                        {
                            ExpenseTypeId = 6,
                            Description = "Outras despesas",
                            IsActive = true,
                            Name = "Outros"
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Expiration", b =>
                {
                    b.Property<int>("ExpirationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpirationId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("ExpirationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Expirations");

                    b.HasData(
                        new
                        {
                            ExpirationId = 1,
                            BatchNumber = "OLEO-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote inicial",
                            ProductId = 3,
                            Quantity = 30
                        },
                        new
                        {
                            ExpirationId = 2,
                            BatchNumber = "OLEO-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote reserva",
                            ProductId = 3,
                            Quantity = 30
                        },
                        new
                        {
                            ExpirationId = 3,
                            BatchNumber = "LEI-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote A",
                            ProductId = 4,
                            Quantity = 60
                        },
                        new
                        {
                            ExpirationId = 4,
                            BatchNumber = "LEI-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote B",
                            ProductId = 4,
                            Quantity = 60
                        },
                        new
                        {
                            ExpirationId = 5,
                            BatchNumber = "COLA-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Produção 1",
                            ProductId = 5,
                            Quantity = 45
                        },
                        new
                        {
                            ExpirationId = 6,
                            BatchNumber = "COLA-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Produção 2",
                            ProductId = 5,
                            Quantity = 45
                        },
                        new
                        {
                            ExpirationId = 7,
                            BatchNumber = "AGUA-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote principal",
                            ProductId = 6,
                            Quantity = 100
                        },
                        new
                        {
                            ExpirationId = 8,
                            BatchNumber = "AGUA-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote adicional",
                            ProductId = 6,
                            Quantity = 100
                        },
                        new
                        {
                            ExpirationId = 9,
                            BatchNumber = "SHA-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote A",
                            ProductId = 8,
                            Quantity = 35
                        },
                        new
                        {
                            ExpirationId = 10,
                            BatchNumber = "SHA-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2027, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote B",
                            ProductId = 8,
                            Quantity = 35
                        },
                        new
                        {
                            ExpirationId = 11,
                            BatchNumber = "CHOC-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote doce A",
                            ProductId = 12,
                            Quantity = 25
                        },
                        new
                        {
                            ExpirationId = 12,
                            BatchNumber = "CHOC-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote doce B",
                            ProductId = 12,
                            Quantity = 25
                        },
                        new
                        {
                            ExpirationId = 13,
                            BatchNumber = "BIS-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote crocante A",
                            ProductId = 13,
                            Quantity = 35
                        },
                        new
                        {
                            ExpirationId = 14,
                            BatchNumber = "BIS-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote crocante B",
                            ProductId = 13,
                            Quantity = 40
                        },
                        new
                        {
                            ExpirationId = 15,
                            BatchNumber = "CAF-2025A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote café A",
                            ProductId = 14,
                            Quantity = 25
                        },
                        new
                        {
                            ExpirationId = 16,
                            BatchNumber = "CAF-2025B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            ExpirationDate = new DateTime(2026, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "Lote café B",
                            ProductId = 14,
                            Quantity = 30
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("Date");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscountAmount = 0m,
                            DueDate = new DateTime(2025, 1, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            InternalNotes = "Seed invoice",
                            InvoiceNumber = "INV-2025-0001",
                            IsDeleted = false,
                            Notes = "Venda balcão",
                            PaidAmount = 13908m,
                            PersonId = 101,
                            ShippingCost = 0m,
                            Status = 3,
                            SubTotal = 12200m,
                            TaxAmount = 1708m,
                            Total = 13908m,
                            UserId = 4
                        },
                        new
                        {
                            InvoiceId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscountAmount = 400m,
                            DueDate = new DateTime(2025, 1, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            InternalNotes = "Seed invoice",
                            InvoiceNumber = "INV-2025-0002",
                            IsDeleted = false,
                            Notes = "Venda com desconto",
                            PaidAmount = 10000m,
                            PersonId = 102,
                            ShippingCost = 0m,
                            Status = 2,
                            SubTotal = 20000m,
                            TaxAmount = 2744m,
                            Total = 22344m,
                            UserId = 4
                        },
                        new
                        {
                            InvoiceId = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscountAmount = 0m,
                            DueDate = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            InternalNotes = "Seed invoice",
                            InvoiceNumber = "INV-2025-0003",
                            IsDeleted = false,
                            Notes = "Pedido corporativo",
                            PaidAmount = 0m,
                            PersonId = 103,
                            ShippingCost = 1000m,
                            Status = 2,
                            SubTotal = 23800m,
                            TaxAmount = 3332m,
                            Total = 28132m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.InvoiceProduct", b =>
                {
                    b.Property<int>("InvoiceProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceProductId"));

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceProductId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceProducts");

                    b.HasData(
                        new
                        {
                            InvoiceProductId = 1,
                            DiscountPercentage = 0m,
                            InvoiceId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            TaxRate = 14m,
                            UnitPrice = 4500m
                        },
                        new
                        {
                            InvoiceProductId = 2,
                            DiscountPercentage = 0m,
                            InvoiceId = 1,
                            ProductId = 4,
                            Quantity = 3,
                            TaxRate = 14m,
                            UnitPrice = 900m
                        },
                        new
                        {
                            InvoiceProductId = 3,
                            DiscountPercentage = 0m,
                            InvoiceId = 1,
                            ProductId = 11,
                            Quantity = 5,
                            TaxRate = 14m,
                            UnitPrice = 100m
                        },
                        new
                        {
                            InvoiceProductId = 4,
                            DiscountPercentage = 5m,
                            InvoiceId = 2,
                            ProductId = 5,
                            Quantity = 10,
                            TaxRate = 14m,
                            UnitPrice = 800m
                        },
                        new
                        {
                            InvoiceProductId = 5,
                            DiscountPercentage = 0m,
                            InvoiceId = 2,
                            ProductId = 6,
                            Quantity = 20,
                            TaxRate = 14m,
                            UnitPrice = 300m
                        },
                        new
                        {
                            InvoiceProductId = 6,
                            DiscountPercentage = 0m,
                            InvoiceId = 2,
                            ProductId = 12,
                            Quantity = 15,
                            TaxRate = 14m,
                            UnitPrice = 400m
                        },
                        new
                        {
                            InvoiceProductId = 7,
                            DiscountPercentage = 0m,
                            InvoiceId = 3,
                            ProductId = 15,
                            Quantity = 1,
                            TaxRate = 14m,
                            UnitPrice = 15000m
                        },
                        new
                        {
                            InvoiceProductId = 8,
                            DiscountPercentage = 0m,
                            InvoiceId = 3,
                            ProductId = 10,
                            Quantity = 2,
                            TaxRate = 14m,
                            UnitPrice = 3500m
                        },
                        new
                        {
                            InvoiceProductId = 9,
                            DiscountPercentage = 0m,
                            InvoiceId = 3,
                            ProductId = 8,
                            Quantity = 1,
                            TaxRate = 14m,
                            UnitPrice = 1800m
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Amount = 13908m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            InvoiceId = 1,
                            IsConfirmed = true,
                            IsDeleted = false,
                            Notes = "Pagamento integral",
                            PaymentDate = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            PaymentTypeId = 1,
                            Reference = "CASH-INV-2025-0001"
                        },
                        new
                        {
                            PaymentId = 2,
                            Amount = 5000m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            InvoiceId = 2,
                            IsConfirmed = true,
                            IsDeleted = false,
                            Notes = "Parcial 1",
                            PaymentDate = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            PaymentTypeId = 1,
                            Reference = "CASH-INV-2025-0002-1"
                        },
                        new
                        {
                            PaymentId = 3,
                            Amount = 5000m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            InvoiceId = 2,
                            IsConfirmed = true,
                            IsDeleted = false,
                            Notes = "Parcial 2",
                            PaymentDate = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            PaymentTypeId = 3,
                            Reference = "CARD-INV-2025-0002-2"
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresReference")
                        .HasColumnType("bit");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = 1,
                            Description = "Pagamento em dinheiro",
                            IsActive = true,
                            Name = "Dinheiro",
                            RequiresReference = false
                        },
                        new
                        {
                            PaymentTypeId = 2,
                            Description = "Pagamento com cartão de débito",
                            IsActive = true,
                            Name = "Cartão de Débito",
                            RequiresReference = true
                        },
                        new
                        {
                            PaymentTypeId = 3,
                            Description = "Pagamento com cartão de crédito",
                            IsActive = true,
                            Name = "Cartão de Crédito",
                            RequiresReference = true
                        },
                        new
                        {
                            PaymentTypeId = 4,
                            Description = "Transferência bancária",
                            IsActive = true,
                            Name = "Transferência Bancária",
                            RequiresReference = true
                        },
                        new
                        {
                            PaymentTypeId = 5,
                            Description = "Pagamento via PIX",
                            IsActive = true,
                            Name = "PIX",
                            RequiresReference = true
                        },
                        new
                        {
                            PaymentTypeId = 6,
                            Description = "Pagamento com múltiplas formas",
                            IsActive = true,
                            Name = "Múltiplas Formas",
                            RequiresReference = false
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PersonId");

                    b.HasIndex("Email");

                    b.HasIndex("TaxId");

                    b.HasIndex("Type");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Address = "Rua A, 100",
                            City = "Luanda",
                            Country = "Angola",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            CreditLimit = 100000m,
                            CurrentBalance = 0m,
                            Email = "carlos.silva@example.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Duarte Gauss",
                            PhoneNumber = "+244900111111",
                            Type = 2
                        },
                        new
                        {
                            PersonId = 101,
                            Address = "Rua A, 100",
                            City = "Luanda",
                            Country = "Angola",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            CreditLimit = 100000m,
                            CurrentBalance = 0m,
                            Email = "carlos.silva@example.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Carlos Silva",
                            PhoneNumber = "+244900111111",
                            Type = 1
                        },
                        new
                        {
                            PersonId = 102,
                            Address = "Av. Central, 200",
                            City = "Luanda",
                            Country = "Angola",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            CreditLimit = 150000m,
                            CurrentBalance = 0m,
                            Email = "ana.pereira@example.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ana Pereira",
                            PhoneNumber = "+244900222222",
                            Type = 1
                        },
                        new
                        {
                            PersonId = 103,
                            Address = "Parque Industrial, Armazém 3",
                            City = "Luanda",
                            Country = "Angola",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            CreditLimit = 500000m,
                            CurrentBalance = 0m,
                            Email = "compras@empresaabc.ao",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Empresa ABC Lda",
                            PhoneNumber = "+244900333333",
                            Type = 1
                        },
                        new
                        {
                            PersonId = 201,
                            Address = "Zona Comercial, Loja 10",
                            City = "Luanda",
                            Country = "Angola",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            CreditLimit = 0m,
                            CurrentBalance = 0m,
                            Email = "contato@alimentoscia.ao",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Alimentos & Cia",
                            PhoneNumber = "+244910000001",
                            Rating = 5,
                            Type = 2
                        },
                        new
                        {
                            PersonId = 202,
                            Address = "Parque das Indústrias, Lote 4",
                            City = "Luanda",
                            Country = "Angola",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            CreditLimit = 0m,
                            CurrentBalance = 0m,
                            Email = "vendas@bebidassa.ao",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bebidas SA",
                            PhoneNumber = "+244910000002",
                            Rating = 4,
                            Type = 2
                        },
                        new
                        {
                            PersonId = 203,
                            Address = "Rua da Tecnologia, 55",
                            City = "Luanda",
                            Country = "Angola",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            CreditLimit = 0m,
                            CurrentBalance = 0m,
                            Email = "suporte@techimport.ao",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tech Import",
                            PhoneNumber = "+244910000003",
                            Rating = 5,
                            Type = 2
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.PriceHistory", b =>
                {
                    b.Property<int>("PriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceHistoryId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NewCostPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NewSalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldCostPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldSalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("PriceHistoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceHistories");

                    b.HasData(
                        new
                        {
                            PriceHistoryId = 1,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 3500m,
                            NewSalePrice = 4500m,
                            OldCostPrice = 3300m,
                            OldSalePrice = 4200m,
                            ProductId = 1,
                            Reason = "Ajuste inicial de preços"
                        },
                        new
                        {
                            PriceHistoryId = 2,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 800m,
                            NewSalePrice = 1200m,
                            OldCostPrice = 700m,
                            OldSalePrice = 1100m,
                            ProductId = 2,
                            Reason = "Correção de margem"
                        },
                        new
                        {
                            PriceHistoryId = 3,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 1000m,
                            NewSalePrice = 1500m,
                            OldCostPrice = 900m,
                            OldSalePrice = 1400m,
                            ProductId = 3,
                            Reason = "Atualização de fornecedor"
                        },
                        new
                        {
                            PriceHistoryId = 4,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 700m,
                            NewSalePrice = 900m,
                            OldCostPrice = 650m,
                            OldSalePrice = 850m,
                            ProductId = 4,
                            Reason = "Ajuste sazonal"
                        },
                        new
                        {
                            PriceHistoryId = 5,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 500m,
                            NewSalePrice = 800m,
                            OldCostPrice = 450m,
                            OldSalePrice = 750m,
                            ProductId = 5,
                            Reason = "Tabela atualizada"
                        },
                        new
                        {
                            PriceHistoryId = 6,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 150m,
                            NewSalePrice = 300m,
                            OldCostPrice = 140m,
                            OldSalePrice = 280m,
                            ProductId = 6,
                            Reason = "Ajuste de custo"
                        },
                        new
                        {
                            PriceHistoryId = 7,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 120m,
                            NewSalePrice = 250m,
                            OldCostPrice = 100m,
                            OldSalePrice = 230m,
                            ProductId = 7,
                            Reason = "Custo matéria-prima"
                        },
                        new
                        {
                            PriceHistoryId = 8,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 1200m,
                            NewSalePrice = 1800m,
                            OldCostPrice = 1100m,
                            OldSalePrice = 1700m,
                            ProductId = 8,
                            Reason = "Reposicionamento"
                        },
                        new
                        {
                            PriceHistoryId = 9,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 400m,
                            NewSalePrice = 700m,
                            OldCostPrice = 350m,
                            OldSalePrice = 650m,
                            ProductId = 9,
                            Reason = "Ajuste geral"
                        },
                        new
                        {
                            PriceHistoryId = 10,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 2800m,
                            NewSalePrice = 3500m,
                            OldCostPrice = 2600m,
                            OldSalePrice = 3300m,
                            ProductId = 10,
                            Reason = "Câmbio"
                        },
                        new
                        {
                            PriceHistoryId = 11,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 50m,
                            NewSalePrice = 100m,
                            OldCostPrice = 45m,
                            OldSalePrice = 90m,
                            ProductId = 11,
                            Reason = "Margem mínima"
                        },
                        new
                        {
                            PriceHistoryId = 12,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 250m,
                            NewSalePrice = 400m,
                            OldCostPrice = 230m,
                            OldSalePrice = 350m,
                            ProductId = 12,
                            Reason = "Ajuste sazonal"
                        },
                        new
                        {
                            PriceHistoryId = 13,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 200m,
                            NewSalePrice = 350m,
                            OldCostPrice = 180m,
                            OldSalePrice = 320m,
                            ProductId = 13,
                            Reason = "Demanda"
                        },
                        new
                        {
                            PriceHistoryId = 14,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 1500m,
                            NewSalePrice = 2200m,
                            OldCostPrice = 1400m,
                            OldSalePrice = 2100m,
                            ProductId = 14,
                            Reason = "Custo de importação"
                        },
                        new
                        {
                            PriceHistoryId = 15,
                            ChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            IsDeleted = false,
                            NewCostPrice = 10000m,
                            NewSalePrice = 15000m,
                            OldCostPrice = 9500m,
                            OldSalePrice = 14000m,
                            ProductId = 15,
                            Reason = "Nova coleção"
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Privilege", b =>
                {
                    b.Property<int>("PrivilegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivilegeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PrivilegeId");

                    b.ToTable("Privileges");

                    b.HasData(
                        new
                        {
                            PrivilegeId = 1,
                            Code = "ADMIN",
                            Description = "Acesso total ao sistema",
                            IsActive = true,
                            Name = "Administrador"
                        },
                        new
                        {
                            PrivilegeId = 2,
                            Code = "MANAGER",
                            Description = "Gestão de vendas e relatórios",
                            IsActive = true,
                            Name = "Gerente"
                        },
                        new
                        {
                            PrivilegeId = 3,
                            Code = "SELLER",
                            Description = "Realizar vendas",
                            IsActive = true,
                            Name = "Vendedor"
                        },
                        new
                        {
                            PrivilegeId = 4,
                            Code = "VIEWER",
                            Description = "Apenas visualização",
                            IsActive = true,
                            Name = "Visualizador"
                        },
                        new
                        {
                            PrivilegeId = 5,
                            Code = "AUDITOR",
                            Description = "Auditoria e logs",
                            IsActive = true,
                            Name = "Auditor"
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<bool>("AllowBackorder")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("ControlsStock")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("ExpirationDays")
                        .HasColumnType("int");

                    b.Property<int?>("ExpirationWarningDays")
                        .HasColumnType("int");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HasExpirationDate")
                        .HasColumnType("bit");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int?>("MaximumStock")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ReorderPoint")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId");

                    b.HasIndex("Barcode");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InternalCode")
                        .IsUnique();

                    b.HasIndex("SKU");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AllowBackorder = false,
                            Barcode = "5600000000011",
                            CategoryId = 3,
                            ControlsStock = true,
                            CostPrice = 3500m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Saco de arroz branco tipo 1 com 5kg",
                            Dimensions = "35x25x8cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 1,
                            ExternalCode = "EXT-0001",
                            HasExpirationDate = false,
                            InternalCode = "P0001",
                            IsDeleted = false,
                            IsFeatured = true,
                            MaximumStock = 300,
                            MinimumStock = 20,
                            Name = "Arroz 5kg",
                            PhotoUrl = "",
                            ReorderPoint = 50,
                            SKU = "ARZ-5KG",
                            SalePrice = 4500m,
                            ShortDescription = "Arroz tipo 1 - 5kg",
                            Status = 1,
                            SupplierId = 201,
                            TaxRate = 14m,
                            Weight = "5kg"
                        },
                        new
                        {
                            ProductId = 2,
                            AllowBackorder = false,
                            Barcode = "5600000000028",
                            CategoryId = 3,
                            ControlsStock = true,
                            CostPrice = 800m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Pacote de feijão carioca de 1kg",
                            Dimensions = "20x12x5cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 2,
                            ExternalCode = "EXT-0002",
                            HasExpirationDate = false,
                            InternalCode = "P0002",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 400,
                            MinimumStock = 30,
                            Name = "Feijão 1kg",
                            PhotoUrl = "",
                            ReorderPoint = 60,
                            SKU = "FEJ-1KG",
                            SalePrice = 1200m,
                            ShortDescription = "Feijão carioca 1kg",
                            Status = 1,
                            SupplierId = 201,
                            TaxRate = 14m,
                            Weight = "1kg"
                        },
                        new
                        {
                            ProductId = 3,
                            AllowBackorder = false,
                            Barcode = "5600000000035",
                            CategoryId = 3,
                            ControlsStock = true,
                            CostPrice = 1000m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Garrafa de óleo vegetal com 1 litro",
                            Dimensions = "10x10x25cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 3,
                            ExpirationDays = 365,
                            ExpirationWarningDays = 30,
                            ExternalCode = "EXT-0003",
                            HasExpirationDate = true,
                            InternalCode = "P0003",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 200,
                            MinimumStock = 20,
                            Name = "Óleo 1L",
                            PhotoUrl = "",
                            ReorderPoint = 40,
                            SKU = "OLEO-1L",
                            SalePrice = 1500m,
                            ShortDescription = "Óleo vegetal 1L",
                            Status = 1,
                            SupplierId = 201,
                            TaxRate = 14m,
                            Weight = "1L"
                        },
                        new
                        {
                            ProductId = 4,
                            AllowBackorder = false,
                            Barcode = "5600000000042",
                            CategoryId = 2,
                            ControlsStock = true,
                            CostPrice = 700m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Leite UHT integral 1L",
                            Dimensions = "7x7x20cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 4,
                            ExpirationDays = 180,
                            ExpirationWarningDays = 20,
                            ExternalCode = "EXT-0004",
                            HasExpirationDate = true,
                            InternalCode = "P0004",
                            IsDeleted = false,
                            IsFeatured = true,
                            MaximumStock = 500,
                            MinimumStock = 40,
                            Name = "Leite UHT 1L",
                            PhotoUrl = "",
                            ReorderPoint = 80,
                            SKU = "LEI-1L",
                            SalePrice = 900m,
                            ShortDescription = "Leite UHT integral",
                            Status = 1,
                            SupplierId = 202,
                            TaxRate = 14m,
                            Weight = "1L"
                        },
                        new
                        {
                            ProductId = 5,
                            AllowBackorder = false,
                            Barcode = "5600000000059",
                            CategoryId = 2,
                            ControlsStock = true,
                            CostPrice = 500m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Garrafa de refrigerante cola 2 litros",
                            Dimensions = "12x12x32cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 5,
                            ExpirationDays = 365,
                            ExpirationWarningDays = 30,
                            ExternalCode = "EXT-0005",
                            HasExpirationDate = true,
                            InternalCode = "P0005",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 600,
                            MinimumStock = 50,
                            Name = "Refrigerante Cola 2L",
                            PhotoUrl = "",
                            ReorderPoint = 100,
                            SKU = "COLA-2L",
                            SalePrice = 800m,
                            ShortDescription = "Refrigerante sabor cola 2L",
                            Status = 1,
                            SupplierId = 202,
                            TaxRate = 14m,
                            Weight = "2L"
                        },
                        new
                        {
                            ProductId = 6,
                            AllowBackorder = true,
                            Barcode = "5600000000066",
                            CategoryId = 2,
                            ControlsStock = true,
                            CostPrice = 150m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Garrafa de água mineral 1.5L",
                            Dimensions = "10x10x30cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 6,
                            ExpirationDays = 365,
                            ExpirationWarningDays = 60,
                            ExternalCode = "EXT-0006",
                            HasExpirationDate = true,
                            InternalCode = "P0006",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 1000,
                            MinimumStock = 80,
                            Name = "Água Mineral 1.5L",
                            PhotoUrl = "",
                            ReorderPoint = 200,
                            SKU = "AGUA-1_5L",
                            SalePrice = 300m,
                            ShortDescription = "Água mineral sem gás 1.5L",
                            Status = 1,
                            SupplierId = 202,
                            TaxRate = 14m,
                            Weight = "1.5L"
                        },
                        new
                        {
                            ProductId = 7,
                            AllowBackorder = false,
                            Barcode = "5600000000073",
                            CategoryId = 4,
                            ControlsStock = true,
                            CostPrice = 120m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Sabonete perfumado em barra 90g",
                            Dimensions = "8x5x3cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 7,
                            ExternalCode = "EXT-0007",
                            HasExpirationDate = false,
                            InternalCode = "P0007",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 800,
                            MinimumStock = 50,
                            Name = "Sabonete 90g",
                            PhotoUrl = "",
                            ReorderPoint = 150,
                            SKU = "SAB-90G",
                            SalePrice = 250m,
                            ShortDescription = "Sabonete em barra 90g",
                            Status = 1,
                            SupplierId = 203,
                            TaxRate = 14m,
                            Weight = "90g"
                        },
                        new
                        {
                            ProductId = 8,
                            AllowBackorder = false,
                            Barcode = "5600000000080",
                            CategoryId = 4,
                            ControlsStock = true,
                            CostPrice = 1200m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Frasco de shampoo 400ml",
                            Dimensions = "8x5x18cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 8,
                            ExpirationDays = 730,
                            ExpirationWarningDays = 60,
                            ExternalCode = "EXT-0008",
                            HasExpirationDate = true,
                            InternalCode = "P0008",
                            IsDeleted = false,
                            IsFeatured = true,
                            MaximumStock = 200,
                            MinimumStock = 20,
                            Name = "Shampoo 400ml",
                            PhotoUrl = "",
                            ReorderPoint = 40,
                            SKU = "SHA-400",
                            SalePrice = 1800m,
                            ShortDescription = "Shampoo hidratante 400ml",
                            Status = 1,
                            SupplierId = 203,
                            TaxRate = 14m,
                            Weight = "400ml"
                        },
                        new
                        {
                            ProductId = 9,
                            AllowBackorder = false,
                            Barcode = "5600000000097",
                            CategoryId = 5,
                            ControlsStock = true,
                            CostPrice = 400m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Garrafa de detergente 1L",
                            Dimensions = "10x10x25cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 9,
                            ExternalCode = "EXT-0009",
                            HasExpirationDate = false,
                            InternalCode = "P0009",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 300,
                            MinimumStock = 30,
                            Name = "Detergente 1L",
                            PhotoUrl = "",
                            ReorderPoint = 60,
                            SKU = "DET-1L",
                            SalePrice = 700m,
                            ShortDescription = "Detergente multiuso 1L",
                            Status = 1,
                            SupplierId = 203,
                            TaxRate = 14m,
                            Weight = "1L"
                        },
                        new
                        {
                            ProductId = 10,
                            AllowBackorder = false,
                            Barcode = "5600000000103",
                            CategoryId = 7,
                            ControlsStock = true,
                            CostPrice = 2800m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Resma de papel A4 com 500 folhas",
                            Dimensions = "30x21x5cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 10,
                            ExternalCode = "EXT-0010",
                            HasExpirationDate = false,
                            InternalCode = "P0010",
                            IsDeleted = false,
                            IsFeatured = true,
                            MaximumStock = 100,
                            MinimumStock = 10,
                            Name = "Papel A4 500 folhas",
                            PhotoUrl = "",
                            ReorderPoint = 20,
                            SKU = "PAP-A4-500",
                            SalePrice = 3500m,
                            ShortDescription = "Resma Papel A4 500fls",
                            Status = 1,
                            SupplierId = 203,
                            TaxRate = 14m,
                            Weight = "2.5kg"
                        },
                        new
                        {
                            ProductId = 11,
                            AllowBackorder = true,
                            Barcode = "5600000000110",
                            CategoryId = 7,
                            ControlsStock = true,
                            CostPrice = 50m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Caneta esferográfica tinta azul",
                            Dimensions = "14x1x1cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 11,
                            ExternalCode = "EXT-0011",
                            HasExpirationDate = false,
                            InternalCode = "P0011",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 2000,
                            MinimumStock = 100,
                            Name = "Caneta Azul",
                            PhotoUrl = "",
                            ReorderPoint = 300,
                            SKU = "CAN-AZUL",
                            SalePrice = 100m,
                            ShortDescription = "Caneta esferográfica azul",
                            Status = 1,
                            SupplierId = 203,
                            TaxRate = 14m,
                            Weight = "20g"
                        },
                        new
                        {
                            ProductId = 12,
                            AllowBackorder = false,
                            Barcode = "5600000000127",
                            CategoryId = 3,
                            ControlsStock = true,
                            CostPrice = 250m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Tablete de chocolate ao leite 100g",
                            Dimensions = "10x5x1cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 12,
                            ExpirationDays = 365,
                            ExpirationWarningDays = 30,
                            ExternalCode = "EXT-0012",
                            HasExpirationDate = true,
                            InternalCode = "P0012",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 400,
                            MinimumStock = 30,
                            Name = "Chocolate 100g",
                            PhotoUrl = "",
                            ReorderPoint = 60,
                            SKU = "CHOC-100",
                            SalePrice = 400m,
                            ShortDescription = "Tablete de chocolate 100g",
                            Status = 1,
                            SupplierId = 201,
                            TaxRate = 14m,
                            Weight = "100g"
                        },
                        new
                        {
                            ProductId = 13,
                            AllowBackorder = false,
                            Barcode = "5600000000134",
                            CategoryId = 3,
                            ControlsStock = true,
                            CostPrice = 200m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Pacote de biscoito recheado 200g",
                            Dimensions = "15x10x3cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 13,
                            ExpirationDays = 270,
                            ExpirationWarningDays = 30,
                            ExternalCode = "EXT-0013",
                            HasExpirationDate = true,
                            InternalCode = "P0013",
                            IsDeleted = false,
                            IsFeatured = false,
                            MaximumStock = 500,
                            MinimumStock = 40,
                            Name = "Biscoito 200g",
                            PhotoUrl = "",
                            ReorderPoint = 80,
                            SKU = "BIS-200",
                            SalePrice = 350m,
                            ShortDescription = "Biscoito recheado 200g",
                            Status = 1,
                            SupplierId = 201,
                            TaxRate = 14m,
                            Weight = "200g"
                        },
                        new
                        {
                            ProductId = 14,
                            AllowBackorder = false,
                            Barcode = "5600000000141",
                            CategoryId = 3,
                            ControlsStock = true,
                            CostPrice = 1500m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Pacote de café 500g",
                            Dimensions = "20x10x6cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 14,
                            ExpirationDays = 540,
                            ExpirationWarningDays = 45,
                            ExternalCode = "EXT-0014",
                            HasExpirationDate = true,
                            InternalCode = "P0014",
                            IsDeleted = false,
                            IsFeatured = true,
                            MaximumStock = 200,
                            MinimumStock = 15,
                            Name = "Café 500g",
                            PhotoUrl = "",
                            ReorderPoint = 30,
                            SKU = "CAF-500",
                            SalePrice = 2200m,
                            ShortDescription = "Café torrado e moído 500g",
                            Status = 1,
                            SupplierId = 201,
                            TaxRate = 14m,
                            Weight = "500g"
                        },
                        new
                        {
                            ProductId = 15,
                            AllowBackorder = true,
                            Barcode = "5600000000158",
                            CategoryId = 6,
                            ControlsStock = true,
                            CostPrice = 10000m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Description = "Fones de ouvido com microfone",
                            Dimensions = "10x8x5cm",
                            DiscountPercentage = 0m,
                            DisplayOrder = 15,
                            ExternalCode = "EXT-0015",
                            HasExpirationDate = false,
                            InternalCode = "P0015",
                            IsDeleted = false,
                            IsFeatured = true,
                            MaximumStock = 100,
                            MinimumStock = 5,
                            Name = "Fones de Ouvido",
                            PhotoUrl = "",
                            ReorderPoint = 10,
                            SKU = "FONES-BT",
                            SalePrice = 15000m,
                            ShortDescription = "Fones intra-auriculares",
                            Status = 1,
                            SupplierId = 203,
                            TaxRate = 14m,
                            Weight = "150g"
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Stock", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastStockUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastStockUpdateByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReservedQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 100,
                            ReservedQuantity = 5
                        },
                        new
                        {
                            ProductId = 2,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 80,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 3,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 60,
                            ReservedQuantity = 2
                        },
                        new
                        {
                            ProductId = 4,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 120,
                            ReservedQuantity = 10
                        },
                        new
                        {
                            ProductId = 5,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 90,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 6,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 200,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 7,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 150,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 8,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 70,
                            ReservedQuantity = 3
                        },
                        new
                        {
                            ProductId = 9,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 110,
                            ReservedQuantity = 4
                        },
                        new
                        {
                            ProductId = 10,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 40,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 11,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 300,
                            ReservedQuantity = 10
                        },
                        new
                        {
                            ProductId = 12,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 50,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 13,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 75,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 14,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 55,
                            ReservedQuantity = 0
                        },
                        new
                        {
                            ProductId = 15,
                            LastStockUpdate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastStockUpdateByUserId = 4,
                            Quantity = 30,
                            ReservedQuantity = 2
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.StockMovement", b =>
                {
                    b.Property<int>("StockMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockMovementId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("NewQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PreviousQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TotalCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StockMovementId");

                    b.HasIndex("Date");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("StockMovements");

                    b.HasData(
                        new
                        {
                            StockMovementId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 100,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 1,
                            Quantity = 100,
                            Reference = "SEED",
                            TotalCost = 350000m,
                            Type = 1,
                            UnitCost = 3500m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 80,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 2,
                            Quantity = 80,
                            Reference = "SEED",
                            TotalCost = 64000m,
                            Type = 1,
                            UnitCost = 800m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 60,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 3,
                            Quantity = 60,
                            Reference = "SEED",
                            TotalCost = 60000m,
                            Type = 1,
                            UnitCost = 1000m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 120,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 4,
                            Quantity = 120,
                            Reference = "SEED",
                            TotalCost = 84000m,
                            Type = 1,
                            UnitCost = 700m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 90,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 5,
                            Quantity = 90,
                            Reference = "SEED",
                            TotalCost = 45000m,
                            Type = 1,
                            UnitCost = 500m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 6,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 200,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 6,
                            Quantity = 200,
                            Reference = "SEED",
                            TotalCost = 30000m,
                            Type = 1,
                            UnitCost = 150m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 7,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 150,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 7,
                            Quantity = 150,
                            Reference = "SEED",
                            TotalCost = 18000m,
                            Type = 1,
                            UnitCost = 120m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 8,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 70,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 8,
                            Quantity = 70,
                            Reference = "SEED",
                            TotalCost = 84000m,
                            Type = 1,
                            UnitCost = 1200m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 9,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 110,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 9,
                            Quantity = 110,
                            Reference = "SEED",
                            TotalCost = 44000m,
                            Type = 1,
                            UnitCost = 400m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 10,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 40,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 10,
                            Quantity = 40,
                            Reference = "SEED",
                            TotalCost = 112000m,
                            Type = 1,
                            UnitCost = 2800m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 11,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 300,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 11,
                            Quantity = 300,
                            Reference = "SEED",
                            TotalCost = 15000m,
                            Type = 1,
                            UnitCost = 50m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 12,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 50,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 12,
                            Quantity = 50,
                            Reference = "SEED",
                            TotalCost = 12500m,
                            Type = 1,
                            UnitCost = 250m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 13,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 75,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 13,
                            Quantity = 75,
                            Reference = "SEED",
                            TotalCost = 15000m,
                            Type = 1,
                            UnitCost = 200m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 14,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 55,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 14,
                            Quantity = 55,
                            Reference = "SEED",
                            TotalCost = 82500m,
                            Type = 1,
                            UnitCost = 1500m,
                            UserId = 4
                        },
                        new
                        {
                            StockMovementId = 15,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = 4,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            NewQuantity = 30,
                            Notes = "Entrada inicial de estoque",
                            PreviousQuantity = 0,
                            ProductId = 15,
                            Quantity = 30,
                            Reference = "SEED",
                            TotalCost = 300000m,
                            Type = 1,
                            UnitCost = 10000m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastLoginIp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2025, 10, 23, 1, 0, 11, 740, DateTimeKind.Utc).AddTicks(3814),
                            FailedLoginAttempts = 0,
                            IsDeleted = false,
                            LastLoginIp = "",
                            PasswordHash = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            PersonId = 1,
                            Status = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.UserPrivilege", b =>
                {
                    b.Property<int>("UserPrivilegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPrivilegeId"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GrantedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPrivilegeId");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPrivileges");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.AuditLog", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Expense", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VendaFlex.Data.Entities.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpenseType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Expiration", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Product", "Product")
                        .WithMany("Expirations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Invoice", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Person", "Person")
                        .WithMany("Invoices")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VendaFlex.Data.Entities.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.InvoiceProduct", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendaFlex.Data.Entities.Product", "Product")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Payment", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendaFlex.Data.Entities.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.PriceHistory", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Product", "Product")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Product", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VendaFlex.Data.Entities.Person", "Supplier")
                        .WithMany("SuppliedProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Stock", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("VendaFlex.Data.Entities.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.StockMovement", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VendaFlex.Data.Entities.User", "User")
                        .WithMany("StockMovements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.User", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("VendaFlex.Data.Entities.User", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.UserPrivilege", b =>
                {
                    b.HasOne("VendaFlex.Data.Entities.Privilege", "Privilege")
                        .WithMany("UserPrivileges")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendaFlex.Data.Entities.User", "User")
                        .WithMany("UserPrivileges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Privilege");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceProducts");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Person", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SuppliedProducts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Privilege", b =>
                {
                    b.Navigation("UserPrivileges");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.Product", b =>
                {
                    b.Navigation("Expirations");

                    b.Navigation("InvoiceProducts");

                    b.Navigation("PriceHistories");

                    b.Navigation("Stock")
                        .IsRequired();

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("VendaFlex.Data.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Expenses");

                    b.Navigation("Invoices");

                    b.Navigation("StockMovements");

                    b.Navigation("UserPrivileges");
                });
#pragma warning restore 612, 618
        }
    }
}
